# This workflow will auto download a database and push any changes if found

name: pqh-updater

on:
  # run this task every minute 45 of every hr of every day
  # preload usually happens at minute 45? but actions fires 5mins later
  schedule:
  - cron: '45 * * * *'

  # allow this task to be run manually from Actions tab
  workflow_dispatch:

jobs:
  # needs access to {{ secrets.DEPLOY_ACCESS_TOKEN }} with at least public_repo scope
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js [16.x]
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install Node.js Dependencies
        run: npm install sqlite sqlite3 @actions/core

      - name: Run update.js
        id: update
        run: node ./.github/workflows/pqh-updater/update.cjs

      - name: Check if pie.json exists
        id: images
        run: |
          if test -f "./pie.json"; then
            echo "pie.json exists"
            echo "images=true" >> $GITHUB_OUTPUT
          fi

      - name: Checkout Spugn/pie
        if: ${{ steps.images.outputs.images }}
        uses: actions/checkout@v3
        with:
          repository: 'Spugn/pie'
          path: 'pie'

      - name: Setup PHP with extensions
        if: ${{ steps.images.outputs.images }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: imagick, lz4-kjdev/php-ext-lz4@0.4.3

      # astcenc binaries will be saved to /opt/hostedtoolcache/astcenc/4.4.0/x64/bin/
      - name: Setup astcenc
        if: ${{ steps.images.outputs.images }}
        uses: supplypike/setup-bin@v3
        with:
          uri: 'https://github.com/ARM-software/astc-encoder/releases/download/4.4.0/astcenc-4.4.0-linux-x64.zip'
          name: 'astcenc'
          version: '4.4.0'

      - name: Setup ffmpeg
        if: ${{ steps.images.outputs.images }}
        uses: FedericoCarboni/setup-ffmpeg@v2

      - name: eat pie
        if: ${{ steps.images.outputs.images }}
        run: php ./pie/pie.php

      # assuming there are new changes
      - name: Update data on Git
        if: ${{ steps.update.outputs.success == 'true' }}
        run: |
          git config user.name $user_name
          git config user.email $user_email
          git add ./static/data/version.json
          git add ./static/data/data.json
          git add ./static/data/data.character.json
          git add ./static/data/data.equipment.json
          git add ./static/data/data.quest.json
          git add ./src/lib/api/data.min.json
          git diff-index --quiet HEAD || git commit -m "[Bot] Data Update" -m '
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          This is an automated process. Issues may or may not have occured.'
          if test -f "./pie.json"; then
            json=`cat ./pie.json`
            git add ./static/images
            git diff-index --quiet HEAD || git commit -m "[Bot] Extract Images" -m "
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            This is an automated process. Issues may or may not have occured.

            Extracted images using the following JSON instructions:
            $json"
          fi
          git push
        env:
          user_name: 'Spugn'
          user_email: 'spugn@users.noreply.github.com'
          github_token: ${{ secrets.DEPLOY_ACCESS_TOKEN }}
          repository: ${{ github.repository }}

      - name: Build gh-pages
        if: ${{ steps.update.outputs.success == 'true' }}
        run: npm run build

      - name: Deploy gh-pages to Git
        if: ${{ steps.update.outputs.success == 'true' }}
        run: |
          git config --global user.name $user_name
          git config --global user.email $user_email
          git remote set-url origin https://${github_token}@github.com/${repository}
          npm run deploy
        env:
          user_name: 'Spugn'
          user_email: 'spugn@users.noreply.github.com'
          github_token: ${{ secrets.DEPLOY_ACCESS_TOKEN }}
          repository: ${{ github.repository }}